
CSE_306_REGISTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000142  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c1  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e5  00000000  00000000  0000090d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c9  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1 << JTD);
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1 << JTD);
  86:	84 bf       	out	0x34, r24	; 52

	DDRA = 0x00; // A[3:0] - SrcReg1, A[7:4] - SrcReg2
  88:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00; // B[3:0] - DstReg, B[7:4] - Write Data
  8a:	17 ba       	out	0x17, r1	; 23

	DDRC = 0xFF; // C[3:0] - $1, C[7:4] - $2
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF0; // D[0] - WriteReg, D[1] - CLK, D[2] - RESET, D[7:3] - Unused
  90:	80 ef       	ldi	r24, 0xF0	; 240
  92:	81 bb       	out	0x11, r24	; 17

	uint8_t src, dst_data, last_control = 0, current_control;
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x18>
				PORTD = dst_data & 0xf0;
			}
			_delay_ms(100);
		}

		last_control = current_control;
  98:	32 2f       	mov	r19, r18

	uint8_t src, dst_data, last_control = 0, current_control;
	
	while (1)
	{
		src = PINA;
  9a:	e9 b3       	in	r30, 0x19	; 25
		dst_data = PINB;
  9c:	46 b3       	in	r20, 0x16	; 22
		current_control = PIND;
  9e:	20 b3       	in	r18, 0x10	; 16

		PORTC = (REGISTOR[(src >> 4) & 0x7] << 4) | (REGISTOR[src & 0x7]);
  a0:	ae 2f       	mov	r26, r30
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	b5 95       	asr	r27
  a6:	a7 95       	ror	r26
  a8:	b5 95       	asr	r27
  aa:	a7 95       	ror	r26
  ac:	b5 95       	asr	r27
  ae:	a7 95       	ror	r26
  b0:	b5 95       	asr	r27
  b2:	a7 95       	ror	r26
  b4:	a7 70       	andi	r26, 0x07	; 7
  b6:	bb 27       	eor	r27, r27
  b8:	a0 5a       	subi	r26, 0xA0	; 160
  ba:	bf 4f       	sbci	r27, 0xFF	; 255
  bc:	8c 91       	ld	r24, X
  be:	50 e1       	ldi	r21, 0x10	; 16
  c0:	85 9f       	mul	r24, r21
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	e7 70       	andi	r30, 0x07	; 7
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	e0 5a       	subi	r30, 0xA0	; 160
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	90 81       	ld	r25, Z
  d0:	89 2b       	or	r24, r25
  d2:	85 bb       	out	0x15, r24	; 21

		if (current_control & RESET_)
  d4:	22 ff       	sbrs	r18, 2
  d6:	11 c0       	rjmp	.+34     	; 0xfa <main+0x78>
  d8:	80 e0       	ldi	r24, 0x00	; 0
		{
			for (uint8_t i = 0; i < 8; i++)
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	38 f4       	brcc	.+14     	; 0xec <main+0x6a>
				REGISTOR[i] = 0;
  de:	e8 2f       	mov	r30, r24
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	10 82       	st	Z, r1

		PORTC = (REGISTOR[(src >> 4) & 0x7] << 4) | (REGISTOR[src & 0x7]);

		if (current_control & RESET_)
		{
			for (uint8_t i = 0; i < 8; i++)
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	f7 cf       	rjmp	.-18     	; 0xda <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	87 ea       	ldi	r24, 0xA7	; 167
  ee:	91 e6       	ldi	r25, 0x61	; 97
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x6e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x74>
  f6:	00 00       	nop
  f8:	d0 cf       	rjmp	.-96     	; 0x9a <main+0x18>
				REGISTOR[i] = 0;
			_delay_ms(100);
			continue;
		}

		if ((current_control ^ last_control) & CLK_)
  fa:	83 2f       	mov	r24, r19
  fc:	82 27       	eor	r24, r18
  fe:	81 ff       	sbrs	r24, 1
 100:	cb cf       	rjmp	.-106    	; 0x98 <main+0x16>
		{ // EDGE
			if ((last_control & CLK_) && (last_control & WRITE_REG_))
 102:	31 ff       	sbrs	r19, 1
 104:	14 c0       	rjmp	.+40     	; 0x12e <main+0xac>
 106:	30 ff       	sbrs	r19, 0
 108:	12 c0       	rjmp	.+36     	; 0x12e <main+0xac>
			{ // NEGATIVE EDGE with WRITE INSTRUCTION
				REGISTOR[dst_data & 0x7] = (dst_data >> 4);
 10a:	e4 2f       	mov	r30, r20
 10c:	e7 70       	andi	r30, 0x07	; 7
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	84 2f       	mov	r24, r20
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	95 95       	asr	r25
 122:	87 95       	ror	r24
 124:	e0 5a       	subi	r30, 0xA0	; 160
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 83       	st	Z, r24
				PORTD = dst_data & 0xf0;
 12a:	40 7f       	andi	r20, 0xF0	; 240
 12c:	42 bb       	out	0x12, r20	; 18
 12e:	87 ea       	ldi	r24, 0xA7	; 167
 130:	91 e6       	ldi	r25, 0x61	; 97
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0xb0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xb6>
 138:	00 00       	nop
			}
			_delay_ms(100);
		}

		last_control = current_control;
 13a:	32 2f       	mov	r19, r18
 13c:	ae cf       	rjmp	.-164    	; 0x9a <main+0x18>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
