
CSE_306-INSTRUCTION.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000000d4  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000669  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b7  00000000  00000000  00000861  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027f  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000054  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// So write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1 << JTD);
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1 << JTD);
  86:	84 bf       	out	0x34, r24	; 52

	DDRB = 0x00; // input pc
  88:	17 ba       	out	0x17, r1	; 23

	// Instruction : D[7:0]C[7:0]
	DDRC = 0xFF; // lower 8-bits of instruction
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF; // upper 8-bits of instruction
  8e:	8a bb       	out	0x1a, r24	; 26

	uint8_t pc = -1;
	uint16_t instruction = 0;
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	60 e0       	ldi	r22, 0x00	; 0

	// Instruction : D[7:0]C[7:0]
	DDRC = 0xFF; // lower 8-bits of instruction
	DDRA = 0xFF; // upper 8-bits of instruction

	uint8_t pc = -1;
  94:	9f ef       	ldi	r25, 0xFF	; 255
	uint16_t instruction = 0;
	/* Replace with your application code */
	while (1)
	{
		if (PINB != pc)
  96:	86 b3       	in	r24, 0x16	; 22
  98:	98 17       	cp	r25, r24
  9a:	e9 f3       	breq	.-6      	; 0x96 <main+0x14>
		{
			pc = PINB;
  9c:	96 b3       	in	r25, 0x16	; 22
			if (pc < count)
  9e:	29 2f       	mov	r18, r25
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <count>
  a6:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <count+0x1>
  aa:	24 17       	cp	r18, r20
  ac:	35 07       	cpc	r19, r21
  ae:	3c f4       	brge	.+14     	; 0xbe <main+0x3c>
			{
				instruction = INSTRUCTIONS[pc];
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	f9 01       	movw	r30, r18
  b6:	e0 5a       	subi	r30, 0xA0	; 160
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	70 81       	ld	r23, Z
  bc:	61 81       	ldd	r22, Z+1	; 0x01
			}
			PORTC = (uint8_t)instruction;
  be:	75 bb       	out	0x15, r23	; 21
			PORTA = (uint8_t)(instruction >> 8);
  c0:	6b bb       	out	0x1b, r22	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e3 ed       	ldi	r30, 0xD3	; 211
  c4:	f0 e3       	ldi	r31, 0x30	; 48
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x44>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4a>
  cc:	00 00       	nop
  ce:	e3 cf       	rjmp	.-58     	; 0x96 <main+0x14>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
